const v SIZE = 1000
const v qpow_MOD = 10089
1t = 1000 + 2
var a arr [ 1t ]
2t = 1000 + 2
var a temp [ 2t ]
func void divide_and_conquer_sort
para v n
para a a [ ]
para v s
start divide_and_conquer_sort
#if1
#cond1 n == 1
cond #cond1
CheckCond
start #if1
ret
end #if1
start #else1
#if2
#cond1 n == 2
cond #cond1
CheckCond
start #if2
#if3
3t = s + 0
4t = a [ 3t ]
5t = s + 1
6t = a [ 5t ]
#cond1 4t > 6t
cond #cond1
CheckCond
start #if3
7t = s + 0
8t = a [ 7t ]
var v tmp = 8t
9t = s + 0
10t = s + 1
11t = a [ 10t ]
upd a [ 9t ] = 11t
12t = s + 1
upd a [ 12t ] = tmp
end #if3
end #if2
start #else2
13t = n / 2
var v first_n = 13t
14t = n - first_n
var v last_n = 14t
push first_n
push a
push s
call divide_and_conquer_sort
15t = RET
push last_n
push a
16t = s + first_n
push 16t
call divide_and_conquer_sort
17t = RET
var v tpos = 0
var v f_pos = 0
var v l_pos = 0
18t = s + first_n
var v last_s = 18t
#while
#cond1 1
cond #cond1
CheckCond
start #while
#if4
19t = first_n - 1
#cond1 f_pos == 19t
cond #cond1
CheckCond
start #if4
#if5
20t = last_n - 1
#cond1 l_pos == 20t
cond #cond1
CheckCond
start #if5
BREAK
end #if5
end #if4
#if6
21t = first_n - 1
#cond1 f_pos == 21t
cond #cond1
CheckCond
start #if6
22t = last_s + l_pos
23t = a [ 22t ]
upd temp [ tpos ] = 23t
24t = tpos + 1
upd tpos = 24t
25t = l_pos + 1
upd l_pos = 25t
end #if6
start #else6
#if7
26t = last_n - 1
#cond1 l_pos == 26t
cond #cond1
CheckCond
start #if7
27t = s + f_pos
28t = a [ 27t ]
upd temp [ tpos ] = 28t
29t = tpos + 1
upd tpos = 29t
30t = f_pos + 1
upd f_pos = 30t
end #if7
start #else7
#if8
31t = s + f_pos
32t = a [ 31t ]
33t = last_s + l_pos
34t = a [ 33t ]
#cond1 32t < 34t
cond #cond1
CheckCond
start #if8
35t = s + f_pos
36t = a [ 35t ]
upd temp [ tpos ] = 36t
37t = tpos + 1
upd tpos = 37t
38t = f_pos + 1
upd f_pos = 38t
end #if8
start #else8
39t = last_s + l_pos
40t = a [ 39t ]
upd temp [ tpos ] = 40t
41t = tpos + 1
upd tpos = 41t
42t = l_pos + 1
upd l_pos = 42t
end #else8
end #else7
end #else6
end #while
var v i = 0
#while
#cond1 i != n
cond #cond1
CheckCond
start #while
43t = s + i
44t = temp [ i ]
upd a [ 43t ] = 44t
45t = i + 1
upd i = 45t
end #while
end #else2
end #else1
ret
end divide_and_conquer_sort
func int quick_pow
para v a
para v p
para v mod
start quick_pow
var v pp = p
var v A = a
var v ans = 1
#while
#cond1 pp != 0
cond #cond1
CheckCond
start #while
#if9
46t = pp % 2
#cond1 46t == 1
cond #cond1
CheckCond
start #if9
47t = ans * A % mod
upd ans = 47t
end #if9
48t = A * A % mod
upd A = 48t
49t = pp / 2
upd pp = 49t
end #while
ret ans
end quick_pow
func int hash
para v n
para a a [ ]
start hash
const v Base = 53
const v MOD = 9999973
var v hash = 0
var v i = 0
#while
#cond1 i != n
cond #cond1
CheckCond
start #while
50t = a [ i ]
51t = ( hash * Base + 50t ) % MOD
upd hash = 51t
52t = i + 1
upd i = 52t
end #while
ret hash
end hash
func int main
start main
str-1 =20373649
ln-1
PRINTF
var v cnt = 0
#while
#cond1 cnt != 5
cond #cond1
CheckCond
start #while
var v n
53t = GETINT
upd n = 53t
var v i = 0
#while
#cond1 i != n
cond #cond1
CheckCond
start #while
upd arr [ i ] = getint ( )
54t = i + 1
upd i = 54t
end #while
push n
push arr
push 0
call divide_and_conquer_sort
55t = RET
str-1 =The hash of the sorted array is 
ins-1
str-2 =.
ln-1
push n
push arr
call hash
56t = RET
anw-1 = 56t
PRINTF
57t = cnt + 1
upd cnt = 57t
end #while
var a qpow_ans [ 4 ]
push 34
push 89
push qpow_MOD
call quick_pow
58t = RET
upd qpow_ans [ 0 ] = 58t
push 59
push 122
push qpow_MOD
call quick_pow
59t = RET
upd qpow_ans [ 1 ] = 59t
push 13
push 3444
push qpow_MOD
call quick_pow
60t = RET
upd qpow_ans [ 2 ] = 60t
push 11
push 987
push qpow_MOD
call quick_pow
61t = RET
upd qpow_ans [ 3 ] = 61t
str-1 =The answer of quick_pow is: 
ins-1
str-2 = 
ins-2
str-3 = 
ins-3
str-4 = 
ins-4
str-5 =.
ln-1
62t = qpow_ans [ 0 ]
anw-1 = 62t
63t = qpow_ans [ 1 ]
anw-2 = 63t
64t = qpow_ans [ 2 ]
anw-3 = 64t
65t = qpow_ans [ 3 ]
anw-4 = 65t
PRINTF
var v a
66t = GETINT
upd a = 66t
var v b
67t = GETINT
upd b = 67t
var v c
68t = GETINT
upd c = 68t
#if10
#cond1 a < b == b < c
cond #cond1
CheckCond
start #if10
str-1 =a < b and b < c are equal.
ln-1
PRINTF
end #if10
start #block
start #block
start #block
start #block
start #block
end #block
end #block
end #block
end #block
end #block
69t = 213 * 789
70t = 2334 - 2378
var v tmp_val
71t = GETINT
upd tmp_val = 71t
72t = tmp_val * 8 * 16 * 256
upd tmp_val = 72t
str-1 =The num I input is: 
ins-1
ln-1
73t = tmp_val / 8 / 16 / 256
anw-1 = 73t
PRINTF
74t = ( ( 12 * tmp_val ) / 7 * 23 - 2222 + 34 ) % 6 * 999 - 1222
var v d = 74t
str-1 =After a complex calculation: d = 
ins-1
ln-1
anw-1 = d
PRINTF
ret 0
end main
