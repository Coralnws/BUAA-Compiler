<CompUnit>
<Decl>
<VarDecl>
int
<VarDef>
a
,
<VarDef>
b
,
<VarDef>
c
,
<VarDef>
d
,
<VarDef>
e
,
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<FuncDef>
<FuncType>
int
func0
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
c
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
128
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
%
<UnaryExp>
<PrimaryExp>
<LVal>
c
;
}
<FuncDef>
<FuncType>
int
func1
(
<FuncFParams>
<FuncFParam>
int
a
)
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
;
}
<FuncDef>
<FuncType>
int
func2
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"a=%d , b=%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
%
<UnaryExp>
<PrimaryExp>
<LVal>
b
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"return 1\n"
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
<FuncDef>
<FuncType>
int
func3
(
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"glo_i = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
tt0
,
<VarDef>
tt1
,
<VarDef>
t2
,
<VarDef>
tt3
,
<VarDef>
tt4
,
<VarDef>
v
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1906
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
v
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
*
<UnaryExp>
<PrimaryExp>
<Number>
32
*
<UnaryExp>
<PrimaryExp>
<LVal>
a
/
<UnaryExp>
<PrimaryExp>
<LVal>
a
/
<UnaryExp>
<PrimaryExp>
<Number>
32
;
<BlockItem>
<Stmt>
<LVal>
b
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
func0
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
v
)
;
<BlockItem>
<Stmt>
<LVal>
tt0
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
;
<BlockItem>
<Stmt>
<LVal>
tt1
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
;
<BlockItem>
<Stmt>
<LVal>
t2
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
;
<BlockItem>
<Stmt>
<LVal>
tt3
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
;
<BlockItem>
<Stmt>
<LVal>
tt4
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
func2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"sum = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt0
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
t2
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt3
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt4
)
;
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
func1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
)
;
<BlockItem>
<Stmt>
printf
(
"i=%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
)
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt0
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
t2
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt3
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tt4
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
<LVal>
a
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
b
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
c
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
d
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
e
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
getint
(
)
;
<BlockItem>
<Stmt>
printf
(
"main_i = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
)
;
<BlockItem>
<Stmt>
printf
(
"a=%d , b=%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
func3
(
)
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
