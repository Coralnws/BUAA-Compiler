<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
n
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
a
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstDef>
b
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
c
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstDef>
d
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<ConstDef>
e
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
;
<FuncDef>
<FuncType>
int
fib
(
<FuncFParams>
<FuncFParam>
int
n
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ret
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
ret
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
ret
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
ret
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
fib
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
+
<MulExp>
<UnaryExp>
fib
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ret
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n
;
<BlockItem>
<Stmt>
<LVal>
n
=
getint
(
)
;
<BlockItem>
<Stmt>
printf
(
"19374223\n"
)
;
<BlockItem>
<Stmt>
printf
(
"fibo[%d] = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
fib
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
)
;
<BlockItem>
<Stmt>
printf
(
"fibo[%d] / 2 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
fib
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
/
<UnaryExp>
<PrimaryExp>
<Number>
2
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
""
)
;
<BlockItem>
<Stmt>
printf
(
"/***************** END *****************/\n"
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
