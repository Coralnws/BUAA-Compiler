<CompUnit>
<Decl>
<VarDecl>
int
<VarDef>
u
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
%
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<VarDef>
v
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
,
<VarDef>
s
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
9
;
<Decl>
<VarDecl>
int
<VarDef>
dim_2
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
;
<Decl>
<VarDecl>
int
<VarDef>
array
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
}
}
;
<FuncDef>
<FuncType>
int
add_three
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
arr
[
]
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
;
}
<FuncDef>
<FuncType>
int
add1
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ans
;
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
AAA
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstDef>
BBB_
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstDef>
CCC
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
9
;
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
a1
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
,
<ConstDef>
a2
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
22
;
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
;
<BlockItem>
<Stmt>
printf
(
"20373394\n"
)
;
<BlockItem>
<Stmt>
printf
(
"a = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
)
;
<BlockItem>
<Stmt>
printf
(
"b = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
;
}
<FuncDef>
<FuncType>
int
addmmm
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
,
<FuncFParam>
int
c
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
;
}
<FuncDef>
<FuncType>
int
add
(
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
99
;
}
<FuncDef>
<FuncType>
void
printarrrr
(
<FuncFParams>
<FuncFParam>
int
arr
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"first: %d"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
)
;
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
printarr
(
<FuncFParams>
<FuncFParam>
int
arr
[
]
,
<FuncFParam>
int
arr2
[
]
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"first : %d"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
)
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
var_array
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
7
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
7
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
8
}
;
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
c_array
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
var_AAA
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
var_2dim
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
}
}
;
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
ONE
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<LVal>
ONE
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
99
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
99
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
99
/
<UnaryExp>
add
(
)
;
}
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
%
<UnaryExp>
<PrimaryExp>
<Number>
3
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
input_n
,
<VarDef>
input_m
;
<BlockItem>
<Stmt>
<LVal>
input_n
=
getint
(
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
input_n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<LVal>
input_n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
input_n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ONE
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
addmmm
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
;
<BlockItem>
<Stmt>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
*
<UnaryExp>
add
(
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ui
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
i
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add
(
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
}
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
}
else
<Stmt>
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d is not 2\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
}
<BlockItem>
<Stmt>
printf
(
"xxxx\n"
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
var_array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
*
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Stmt>
break
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
continue
;
}
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printarr
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printarrrr
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
