<CompUnit>
<FuncDef>
<FuncType>
void
read
(
<FuncFParams>
<FuncFParam>
int
a
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
,
<FuncFParam>
int
n
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
a
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
c
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1000
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
997
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
123
/
<UnaryExp>
<PrimaryExp>
<Number>
145
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
*
<UnaryExp>
<PrimaryExp>
<Number>
5
%
<UnaryExp>
<PrimaryExp>
<Number>
7
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
/
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
}
}
;
<BlockItem>
<Stmt>
<LVal>
c
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
99
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Stmt>
printf
(
"20373318\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"a[%d] = %d, "
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
,
<VarDef>
flag
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
123456789
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"c[%d][%d] = %d, "
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
)
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
a1
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
read
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
sum1
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
sum2
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
sum2
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
<LVal>
sum1
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
;
<BlockItem>
<Stmt>
<LVal>
sum2
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum1
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"sum1 = %d, sum2 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum2
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
asd
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
]
;
<BlockItem>
<Stmt>
<LVal>
asd
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
;
<BlockItem>
<Stmt>
printf
(
"asd[4] = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
asd
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
