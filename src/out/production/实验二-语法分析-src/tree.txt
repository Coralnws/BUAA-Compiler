<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
SIZE
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1000
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
qpow_MOD
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10089
;
<Decl>
<VarDecl>
int
<VarDef>
arr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1000
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
;
<Decl>
<VarDecl>
int
<VarDef>
temp
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1000
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
;
<FuncDef>
<FuncType>
void
divide_and_conquer_sort
(
<FuncFParams>
<FuncFParam>
int
n
,
<FuncFParam>
int
a
[
]
,
<FuncFParam>
int
s
)
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
return
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
tmp
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
;
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
;
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tmp
;
}
}
else
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
first_n
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
/
<UnaryExp>
<PrimaryExp>
<Number>
2
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
last_n
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
divide_and_conquer_sort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
divide_and_conquer_sort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
tpos
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
f_pos
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
l_pos
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
last_s
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
break
;
}
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
first_n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
temp
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
]
;
<BlockItem>
<Stmt>
<LVal>
tpos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
l_pos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
temp
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
]
;
<BlockItem>
<Stmt>
<LVal>
tpos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
f_pos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
]
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
temp
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
]
;
<BlockItem>
<Stmt>
<LVal>
tpos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
f_pos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f_pos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
temp
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
last_s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
]
;
<BlockItem>
<Stmt>
<LVal>
tpos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tpos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
l_pos
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l_pos
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
}
}
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
temp
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
}
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
int
quick_pow
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
p
,
<FuncFParam>
int
mod
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
pp
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
p
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
A
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ans
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
pp
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
pp
%
<UnaryExp>
<PrimaryExp>
<Number>
2
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
*
<UnaryExp>
<PrimaryExp>
<LVal>
A
%
<UnaryExp>
<PrimaryExp>
<LVal>
mod
;
}
<BlockItem>
<Stmt>
<LVal>
A
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
A
*
<UnaryExp>
<PrimaryExp>
<LVal>
A
%
<UnaryExp>
<PrimaryExp>
<LVal>
mod
;
<BlockItem>
<Stmt>
<LVal>
pp
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
pp
/
<UnaryExp>
<PrimaryExp>
<Number>
2
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
;
}
<FuncDef>
<FuncType>
int
hash
(
<FuncFParams>
<FuncFParam>
int
n
,
<FuncFParam>
int
a
[
]
)
<Block>
{
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
Base
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
53
;
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
MOD
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
9999973
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
hash
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
hash
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
hash
*
<UnaryExp>
<PrimaryExp>
<LVal>
Base
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
%
<UnaryExp>
<PrimaryExp>
<LVal>
MOD
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
hash
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"20373649\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
cnt
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
cnt
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n
;
<BlockItem>
<Stmt>
<LVal>
n
=
getint
(
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
arr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
divide_and_conquer_sort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
;
<BlockItem>
<Stmt>
printf
(
"The hash of the sorted array is %d.\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
hash
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
)
)
;
<BlockItem>
<Stmt>
<LVal>
cnt
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
cnt
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
qpow_ans
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
;
<BlockItem>
<Stmt>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
quick_pow
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
34
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
89
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_MOD
)
;
<BlockItem>
<Stmt>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
quick_pow
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
59
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
122
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_MOD
)
;
<BlockItem>
<Stmt>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
quick_pow
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
13
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3444
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_MOD
)
;
<BlockItem>
<Stmt>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
quick_pow
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
987
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_MOD
)
;
<BlockItem>
<Stmt>
printf
(
"The answer of quick_pow is: %d %d %d %d.\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qpow_ans
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
a
;
<BlockItem>
<Stmt>
<LVal>
a
=
getint
(
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
b
;
<BlockItem>
<Stmt>
<LVal>
b
=
getint
(
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
c
;
<BlockItem>
<Stmt>
<LVal>
c
=
getint
(
)
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"a < b and b < c are equal.\n"
)
;
}
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<Block>
{
}
}
}
}
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
213
*
<UnaryExp>
<PrimaryExp>
<Number>
789
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2334
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2378
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
tmp_val
;
<BlockItem>
<Stmt>
<LVal>
tmp_val
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
tmp_val
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tmp_val
*
<UnaryExp>
<PrimaryExp>
<Number>
8
*
<UnaryExp>
<PrimaryExp>
<Number>
16
*
<UnaryExp>
<PrimaryExp>
<Number>
256
;
<BlockItem>
<Stmt>
printf
(
"The num I input is: %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tmp_val
/
<UnaryExp>
<PrimaryExp>
<Number>
8
/
<UnaryExp>
<PrimaryExp>
<Number>
16
/
<UnaryExp>
<PrimaryExp>
<Number>
256
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
d
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
*
<UnaryExp>
<PrimaryExp>
<LVal>
tmp_val
)
/
<UnaryExp>
<PrimaryExp>
<Number>
7
*
<UnaryExp>
<PrimaryExp>
<Number>
23
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2222
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
34
)
%
<UnaryExp>
<PrimaryExp>
<Number>
6
*
<UnaryExp>
<PrimaryExp>
<Number>
999
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1222
;
<BlockItem>
<Stmt>
printf
(
"After a complex calculation: d = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
