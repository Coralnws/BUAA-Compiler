<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
a
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
b
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
c
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
d
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
e
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
f
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
/
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
g
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
%
<UnaryExp>
<PrimaryExp>
<LVal>
a
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
h
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
g
)
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
l
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
489
%
<UnaryExp>
<PrimaryExp>
<Number>
562
%
<UnaryExp>
<PrimaryExp>
<Number>
13
%
<UnaryExp>
<PrimaryExp>
<Number>
910
*
<UnaryExp>
<PrimaryExp>
<Number>
895
*
<UnaryExp>
<PrimaryExp>
<Number>
284
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
769
/
<UnaryExp>
<PrimaryExp>
<Number>
458
*
<UnaryExp>
<PrimaryExp>
<Number>
721
%
<UnaryExp>
<PrimaryExp>
<Number>
442
*
<UnaryExp>
<PrimaryExp>
<Number>
666
%
<UnaryExp>
<PrimaryExp>
<Number>
630
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
531
/
<UnaryExp>
<PrimaryExp>
<Number>
898
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
666
%
<UnaryExp>
<PrimaryExp>
<Number>
625
*
<UnaryExp>
<PrimaryExp>
<Number>
471
%
<UnaryExp>
<PrimaryExp>
<Number>
646
*
<UnaryExp>
<PrimaryExp>
<Number>
260
%
<UnaryExp>
<PrimaryExp>
<Number>
7
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
998
%
<UnaryExp>
<PrimaryExp>
<Number>
68
*
<UnaryExp>
<PrimaryExp>
<Number>
92
/
<UnaryExp>
<PrimaryExp>
<Number>
369
%
<UnaryExp>
<PrimaryExp>
<Number>
747
/
<UnaryExp>
<PrimaryExp>
<Number>
62
/
<UnaryExp>
<PrimaryExp>
<Number>
707
*
<UnaryExp>
<PrimaryExp>
<Number>
258
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
34
*
<UnaryExp>
<PrimaryExp>
<Number>
236
*
<UnaryExp>
<PrimaryExp>
<Number>
708
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
257
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
706
%
<UnaryExp>
<PrimaryExp>
<Number>
240
/
<UnaryExp>
<PrimaryExp>
<Number>
1000
/
<UnaryExp>
<PrimaryExp>
<Number>
73
*
<UnaryExp>
<PrimaryExp>
<Number>
163
%
<UnaryExp>
<PrimaryExp>
<Number>
328
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
532
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
309
*
<UnaryExp>
<PrimaryExp>
<Number>
272
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
673
%
<UnaryExp>
<PrimaryExp>
<Number>
970
*
<UnaryExp>
<PrimaryExp>
<Number>
874
/
<UnaryExp>
<PrimaryExp>
<Number>
994
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
o
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
444
%
<UnaryExp>
<PrimaryExp>
<Number>
255
%
<UnaryExp>
<PrimaryExp>
<Number>
242
%
<UnaryExp>
<PrimaryExp>
<Number>
317
%
<UnaryExp>
<PrimaryExp>
<Number>
795
/
<UnaryExp>
<PrimaryExp>
<Number>
623
/
<UnaryExp>
<PrimaryExp>
<Number>
559
*
<UnaryExp>
<PrimaryExp>
<Number>
35
,
<ConstDef>
p
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
)
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
q
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
)
*
<UnaryExp>
<PrimaryExp>
<Number>
655
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
*
<UnaryExp>
<PrimaryExp>
<LVal>
p
,
<ConstDef>
qq
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
)
*
<UnaryExp>
<PrimaryExp>
<Number>
655
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
%
<UnaryExp>
<PrimaryExp>
<LVal>
p
,
<ConstDef>
qqq
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
)
*
<UnaryExp>
<PrimaryExp>
<Number>
655
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
e
/
<UnaryExp>
<PrimaryExp>
<LVal>
p
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
arr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
444
%
<UnaryExp>
<PrimaryExp>
<Number>
255
%
<UnaryExp>
<PrimaryExp>
<Number>
242
%
<UnaryExp>
<PrimaryExp>
<Number>
317
%
<UnaryExp>
<PrimaryExp>
<Number>
795
/
<UnaryExp>
<PrimaryExp>
<Number>
623
/
<UnaryExp>
<PrimaryExp>
<Number>
559
*
<UnaryExp>
<PrimaryExp>
<Number>
35
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
45
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
/
<UnaryExp>
<PrimaryExp>
<Number>
1
}
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
brr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<ConstInitVal>
{
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
;
<Decl>
<VarDecl>
int
<VarDef>
awa
,
<VarDef>
awd
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
141
;
<Decl>
<VarDecl>
int
<VarDef>
crr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
949
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
229
%
<UnaryExp>
<PrimaryExp>
<Number>
375
%
<UnaryExp>
<PrimaryExp>
<Number>
393
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
355
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
948
*
<UnaryExp>
<PrimaryExp>
<Number>
181
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
867
%
<UnaryExp>
<PrimaryExp>
<Number>
366
*
<UnaryExp>
<PrimaryExp>
<Number>
71
*
<UnaryExp>
<PrimaryExp>
<Number>
660
%
<UnaryExp>
<PrimaryExp>
<Number>
20
/
<UnaryExp>
<PrimaryExp>
<Number>
737
/
<UnaryExp>
<PrimaryExp>
<Number>
293
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
/
<UnaryExp>
<PrimaryExp>
<Number>
479
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
311
/
<UnaryExp>
<PrimaryExp>
<Number>
176
%
<UnaryExp>
<PrimaryExp>
<Number>
158
*
<UnaryExp>
<PrimaryExp>
<Number>
43
/
<UnaryExp>
<PrimaryExp>
<Number>
66
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
682
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
788
%
<UnaryExp>
<PrimaryExp>
<Number>
887
*
<UnaryExp>
<PrimaryExp>
<Number>
715
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
225
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
22
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
16
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
;
<Decl>
<VarDecl>
int
<VarDef>
drr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
141
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
141
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
25
}
}
;
<Decl>
<VarDecl>
int
<VarDef>
err
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
225
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
747
}
;
<FuncDef>
<FuncType>
void
foo1
(
)
<Block>
{
<BlockItem>
<Stmt>
return
;
<BlockItem>
<Stmt>
return
;
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
foo2
(
<FuncFParams>
<FuncFParam>
int
a
)
<Block>
{
}
<FuncDef>
<FuncType>
void
mqsort
(
<FuncFParams>
<FuncFParam>
int
l
,
<FuncFParam>
int
r
,
<FuncFParam>
int
q
[
]
)
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
)
<Stmt>
return
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
x
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
)
/
<UnaryExp>
<PrimaryExp>
<Number>
2
]
,
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
t
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
;
<BlockItem>
<Stmt>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
;
<BlockItem>
<Stmt>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
t
;
}
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
)
;
}
<FuncDef>
<FuncType>
int
foo3
(
<FuncFParams>
<FuncFParam>
int
c
,
<FuncFParam>
int
d
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
c
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
;
}
<FuncDef>
<FuncType>
void
mqsort2
(
<FuncFParams>
<FuncFParam>
int
l
,
<FuncFParam>
int
r
,
<FuncFParam>
int
q
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20
]
)
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
)
<Stmt>
return
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
x
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
)
/
<UnaryExp>
<PrimaryExp>
<Number>
2
]
,
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
t
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
;
<BlockItem>
<Stmt>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
;
<BlockItem>
<Stmt>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
t
;
}
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
l
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
r
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
)
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
<LVal>
awa
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
awadwad
;
<BlockItem>
<Stmt>
<LVal>
awadwad
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
545
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
printf
(
"20231204\n"
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
243
/
<UnaryExp>
<PrimaryExp>
<Number>
440
%
<UnaryExp>
<PrimaryExp>
<Number>
570
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
559
/
<UnaryExp>
<PrimaryExp>
<Number>
373
%
<UnaryExp>
<PrimaryExp>
<Number>
960
/
<UnaryExp>
<PrimaryExp>
<Number>
460
%
<UnaryExp>
<PrimaryExp>
<Number>
101
%
<UnaryExp>
<PrimaryExp>
<Number>
205
%
<UnaryExp>
<PrimaryExp>
<Number>
16
/
<UnaryExp>
<PrimaryExp>
<Number>
487
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
107
/
<UnaryExp>
<PrimaryExp>
<Number>
234
/
<UnaryExp>
<PrimaryExp>
<Number>
435
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
;
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"awadwad is %d now\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
awadwad
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
awadwad
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
;
<BlockItem>
<Stmt>
printf
(
"awadwad has changed in block\n"
)
;
<BlockItem>
<Stmt>
printf
(
"awadwad is %d now\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
awadwad
)
;
}
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
fowao
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
14
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
208
*
<UnaryExp>
<PrimaryExp>
<Number>
695
%
<UnaryExp>
<PrimaryExp>
<Number>
426
/
<UnaryExp>
<PrimaryExp>
<Number>
896
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
208
*
<UnaryExp>
<PrimaryExp>
<Number>
695
%
<UnaryExp>
<PrimaryExp>
<Number>
426
/
<UnaryExp>
<PrimaryExp>
<Number>
896
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
<Block>
{
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
208
*
<UnaryExp>
<PrimaryExp>
<Number>
695
%
<UnaryExp>
<PrimaryExp>
<Number>
426
/
<UnaryExp>
<PrimaryExp>
<Number>
896
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
<Block>
{
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
g
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<LVal>
g
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
k
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
crr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
;
}
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
247
*
<UnaryExp>
<PrimaryExp>
<Number>
821
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
45
%
<UnaryExp>
<PrimaryExp>
<Number>
268
%
<UnaryExp>
<PrimaryExp>
<Number>
445
*
<UnaryExp>
<PrimaryExp>
<Number>
262
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
938
%
<UnaryExp>
<PrimaryExp>
<Number>
66
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
140
*
<UnaryExp>
<PrimaryExp>
<Number>
975
*
<UnaryExp>
<PrimaryExp>
<Number>
882
/
<UnaryExp>
<PrimaryExp>
<Number>
758
*
<UnaryExp>
<PrimaryExp>
<Number>
199
/
<UnaryExp>
<PrimaryExp>
<Number>
282
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
175
*
<UnaryExp>
<PrimaryExp>
<Number>
80
/
<UnaryExp>
<PrimaryExp>
<Number>
646
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
181
/
<UnaryExp>
<PrimaryExp>
<Number>
962
%
<UnaryExp>
<PrimaryExp>
<Number>
857
%
<UnaryExp>
<PrimaryExp>
<Number>
193
*
<UnaryExp>
<PrimaryExp>
<Number>
658
*
<UnaryExp>
<PrimaryExp>
<Number>
287
/
<UnaryExp>
<PrimaryExp>
<Number>
796
%
<UnaryExp>
<PrimaryExp>
<Number>
674
*
<UnaryExp>
<PrimaryExp>
<Number>
285
%
<UnaryExp>
<PrimaryExp>
<Number>
314
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
fowao
)
<Stmt>
printf
(
"double if\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
waidj
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waidj
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10000
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
waidj
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waidj
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waidj
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"cur val in loop is %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waidj
)
;
}
else
<Stmt>
continue
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waidj
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
101
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
break
;
}
}
<BlockItem>
<Stmt>
printf
(
"input n and the array which length is n, then will sort this array, n is required less than 20\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n
;
<BlockItem>
<Stmt>
<LVal>
n
=
getint
(
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
q
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
qq
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
}
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
qq
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
printf
(
"after sort, the array is: "
)
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d "
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
q
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"414"
)
;
<BlockItem>
<Stmt>
printf
(
"414"
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qq
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
mqsort
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
qq
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
waf
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
foo3
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
err
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
)
;
<BlockItem>
<Stmt>
<LVal>
crr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
waf
;
<BlockItem>
<Stmt>
<LVal>
err
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
crr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
;
<BlockItem>
<Stmt>
<LVal>
crr
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
err
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
