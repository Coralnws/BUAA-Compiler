<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
_
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20373117
+
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
<Number>
1
/
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
1
%
<UnaryExp>
<PrimaryExp>
<Number>
2
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
value1
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<Decl>
<VarDecl>
int
<VarDef>
value10
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
;
<Decl>
<VarDecl>
int
<VarDef>
value11
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
,
<VarDef>
value12
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
,
<VarDef>
value13
;
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
<LVal>
value13
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
13
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
value14
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
14
,
<VarDef>
value15
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
15
,
<VarDef>
value16
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
value17
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
_
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
n
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
value14
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
value11
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
continue
;
<BlockItem>
<Stmt>
printf
(
"continue is wrong\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"if is wrong\n"
)
;
<BlockItem>
<Stmt>
break
;
}
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
value15
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
value12
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"if is wrong\n"
)
;
<BlockItem>
<Stmt>
break
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
continue
;
<BlockItem>
<Stmt>
printf
(
"continue is wrong\n"
)
;
}
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20373117
+
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
<Number>
1
/
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
1
%
<UnaryExp>
<PrimaryExp>
<Number>
2
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20373117
)
;
}
}
<BlockItem>
<Stmt>
printf
(
"\n\n\n\n\n\n"
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
