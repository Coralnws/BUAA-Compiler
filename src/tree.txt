<CompUnit>
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"19182636\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
a
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
b
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
s1
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
s2
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
13
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
14
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
15
}
}
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
*
<UnaryExp>
<PrimaryExp>
<Number>
2
)
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"! is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"! has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
/
<UnaryExp>
<PrimaryExp>
<LVal>
a
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"< is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"< has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
*
<UnaryExp>
<PrimaryExp>
<LVal>
b
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
*
<UnaryExp>
<PrimaryExp>
<LVal>
s2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
)
%
<UnaryExp>
<PrimaryExp>
<LVal>
a
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
/
<UnaryExp>
<PrimaryExp>
<LVal>
a
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"> is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"> has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"<= is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"<= has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
">= is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
">= has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"== != is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"== != has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
7
%
<UnaryExp>
<PrimaryExp>
<Number>
4
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
*
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"or is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"or has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
/
<UnaryExp>
<PrimaryExp>
<Number>
2
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"the priority of and/or is ok\n"
)
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"the priority of and/or has problem\n"
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
a
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
a
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
s1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
b
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
printf
(
"%d %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
;
}
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
