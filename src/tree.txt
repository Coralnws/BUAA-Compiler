<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
N
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10007
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
const_diag_matrix
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<ConstInitVal>
{
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
,
<ConstDef>
const_d_matrix
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
const_base
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
const_a
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstDef>
const_b
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<ConstDef>
const_c
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstDef>
const_d
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
;
<Decl>
<VarDecl>
int
<VarDef>
diag_matrix
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
,
<VarDef>
d_matrix
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<Decl>
<VarDecl>
int
<VarDef>
base
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
;
<Decl>
<VarDecl>
int
<VarDef>
matrix_A
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
;
<Decl>
<VarDecl>
int
<VarDef>
matrix_B
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
;
<FuncDef>
<FuncType>
void
print_id
(
<FuncFParams>
<FuncFParam>
int
id
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
id
)
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
print_matrix
(
<FuncFParams>
<FuncFParam>
int
matrix
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
j
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
printf
(
"%d"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
)
;
else
<Stmt>
printf
(
"%d "
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
)
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
}
<FuncDef>
<FuncType>
void
create_double_matrix
(
<FuncFParams>
<FuncFParam>
int
matrix_A
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
,
<FuncFParam>
int
matrix_B
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
,
<FuncFParam>
int
x
,
<FuncFParam>
int
y
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
j
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
matrix_A
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
;
<BlockItem>
<Stmt>
<LVal>
matrix_B
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
}
<FuncDef>
<FuncType>
int
sum_matrix
(
<FuncFParams>
<FuncFParam>
int
matrix
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
j
,
<VarDef>
k
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
res
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
res
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
res
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
;
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
res
;
}
<FuncDef>
<FuncType>
int
multi_double_matrix
(
<FuncFParams>
<FuncFParam>
int
matrix_A
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
,
<FuncFParam>
int
matrix_B
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
matrix_C
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
j
,
<VarDef>
k
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
k
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
<LVal>
matrix_C
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
matrix_C
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_C
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_A
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
]
*
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_B
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
]
;
<BlockItem>
<Stmt>
<LVal>
k
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
sum_matrix
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_C
)
;
}
<FuncDef>
<FuncType>
int
vdot
(
<FuncFParams>
<FuncFParam>
int
x
[
]
,
<FuncFParam>
int
y
[
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
d
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
sum
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
sum
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
]
*
<UnaryExp>
<PrimaryExp>
<LVal>
y
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
]
/
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
d
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
const_d_matrix
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<LVal>
sum
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
7
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
sum
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
8
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
break
;
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
continue
;
else
<Stmt>
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
sum
;
}
<FuncDef>
<FuncType>
void
print_vec
(
<FuncFParams>
<FuncFParam>
int
v
[
]
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d %d %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
v
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
v
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
v
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
)
;
}
<FuncDef>
<FuncType>
void
print_solve_math_problem
(
)
<Block>
{
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"Let us solve math problem\n"
)
;
}
}
<FuncDef>
<FuncType>
void
empty_block
(
)
<Block>
{
}
<FuncDef>
<FuncType>
void
solve_math_problem
(
<FuncFParams>
<FuncFParam>
int
x
,
<FuncFParam>
int
y
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
tmp
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
print_solve_math_problem
(
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
empty_block
(
)
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"x not equal to y\n"
)
;
<BlockItem>
<Stmt>
return
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"x is not equal to y and "
)
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
tmp
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
;
<BlockItem>
<Stmt>
printf
(
"x is %d more than y\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tmp
)
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
tmp
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
y
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
x
;
<BlockItem>
<Stmt>
printf
(
"y is %d more than x\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
tmp
)
;
}
}
}
<BlockItem>
<Stmt>
return
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Decl>
<ConstDecl>
const
int
<ConstDef>
N
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
v
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
,
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
N
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
v
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<Number>
0
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
||
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
print_id
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
20373623
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
create_double_matrix
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_A
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_B
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
)
;
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
print_matrix
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_A
)
;
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
print_matrix
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_B
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
res
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
/
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
<Number>
1
)
%
<UnaryExp>
<PrimaryExp>
<Number>
2
)
-
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
1
-
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
res
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
multi_double_matrix
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_A
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
matrix_B
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
res
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
N
)
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
res
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
<LVal>
res
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
vdot
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
v
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
diag_matrix
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
res
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
solve_math_problem
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
solve_math_problem
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
200
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
solve_math_problem
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
300
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
