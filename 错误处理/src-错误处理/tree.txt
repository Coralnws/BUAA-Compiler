<CompUnit>
<Decl>
<ConstDecl>
const
int
<ConstDef>
a
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstDef>
b
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<ConstDef>
c
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
d
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1234567
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
e
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
123456
,
<ConstDef>
f
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
,
<ConstDef>
g
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
40
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
15
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
h
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
)
*
<UnaryExp>
<PrimaryExp>
<Number>
6
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstDef>
x
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
2
)
)
*
<UnaryExp>
<PrimaryExp>
<Number>
0
*
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
__ab1cdefg__123
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
123
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
abc_0_defg
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
30
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
50
)
/
<UnaryExp>
<PrimaryExp>
<Number>
4
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
y
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
40
/
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
2
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
z
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
11
)
%
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
array1
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
}
,
<ConstDef>
array2
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
11
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
13
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
14
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
15
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
16
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
17
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
array
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<ConstInitVal>
{
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
}
}
;
<Decl>
<VarDecl>
int
<VarDef>
array3
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
/
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
/
<UnaryExp>
<PrimaryExp>
<Number>
5
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
6
%
<UnaryExp>
<PrimaryExp>
<Number>
4
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
}
;
<Decl>
<VarDecl>
int
<VarDef>
array4
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
;
<Decl>
<VarDecl>
int
<VarDef>
array5
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
}
;
<Decl>
<VarDecl>
int
<VarDef>
aaa
,
<VarDef>
bbb
,
<VarDef>
ccc
;
<Decl>
<VarDecl>
int
<VarDef>
xx
,
<VarDef>
aaaa
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
123
,
<VarDef>
bbbb
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
123
,
<VarDef>
cccc
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<FuncDef>
<FuncType>
int
compare
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
;
}
<FuncDef>
<FuncType>
int
func1
(
<FuncFParams>
<FuncFParam>
int
a
[
]
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
12
;
}
<FuncDef>
<FuncType>
int
func2
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
[
]
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
10
;
}
<FuncDef>
<FuncType>
int
func3
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
,
<FuncFParam>
int
c
[
]
,
<FuncFParam>
int
d
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
<FuncDef>
<FuncType>
void
test_exp
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
a
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
*
<UnaryExp>
<PrimaryExp>
<Number>
15
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
}
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
b
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
c
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
}
}
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array3
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
*
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
)
*
<UnaryExp>
<PrimaryExp>
<Number>
122
)
*
<UnaryExp>
<PrimaryExp>
<Number>
12
)
%
<UnaryExp>
<PrimaryExp>
<Number>
10
)
;
<BlockItem>
<Stmt>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
9
]
]
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
b
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array1
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
]
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array2
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
]
*
<UnaryExp>
<PrimaryExp>
<Number>
5
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
xxx
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
func1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
)
*
<UnaryExp>
<PrimaryExp>
<Number>
234
/
<UnaryExp>
<PrimaryExp>
<Number>
45
;
}
<FuncDef>
<FuncType>
void
test_params3
(
<FuncFParams>
<FuncFParam>
int
a
)
<Block>
{
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
test_params2
(
<FuncFParams>
<FuncFParam>
int
a
[
]
,
<FuncFParam>
int
b
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
]
)
<Block>
{
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
test_getint
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n1
,
<VarDef>
n2
,
<VarDef>
n3
;
<BlockItem>
<Stmt>
<LVal>
n1
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
n2
=
getint
(
)
;
<BlockItem>
<Stmt>
<LVal>
n3
=
getint
(
)
;
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
test_printf
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
n1
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
100
,
<VarDef>
n2
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
25
,
<VarDef>
n3
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
10
;
<BlockItem>
<Stmt>
printf
(
"n1 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n1
)
;
<BlockItem>
<Stmt>
printf
(
"n2-5 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n2
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
;
<BlockItem>
<Stmt>
printf
(
"n2 + n3 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n2
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n3
)
;
<BlockItem>
<Stmt>
printf
(
"n2 * n3 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n2
*
<UnaryExp>
<PrimaryExp>
<LVal>
n3
)
;
<BlockItem>
<Stmt>
printf
(
"! ()*+,-./0123456789:;\n"
)
;
<BlockItem>
<Stmt>
printf
(
"<=>?@\n"
)
;
<BlockItem>
<Stmt>
printf
(
"ABCDEFGHIJKLMNOPQRSTUVWXYZ\n"
)
;
<BlockItem>
<Stmt>
printf
(
"[]^_`\n"
)
;
<BlockItem>
<Stmt>
printf
(
"abcdefghijklmnopqrstuvwxyz{|}~\n"
)
;
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
int
test_return
(
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
*
<UnaryExp>
<PrimaryExp>
<Number>
2
;
}
<FuncDef>
<FuncType>
int
test_params1
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
,
<FuncFParam>
int
c
)
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
*
<UnaryExp>
<PrimaryExp>
<LVal>
c
*
<UnaryExp>
<PrimaryExp>
<LVal>
a
;
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_getint
(
)
;
<BlockItem>
<Stmt>
printf
(
"19373755\n"
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_printf
(
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_return
(
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_params1
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
d
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
f
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_params2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array3
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
]
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
array3
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
test_params3
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
123
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
