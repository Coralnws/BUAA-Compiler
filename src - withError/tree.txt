<CompUnit>
<Decl>
<VarDecl>
int
<VarDef>
next
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
len
=
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<ConstDef>
next1
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<ConstInitVal>
{
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
}
,
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
}
;
<Decl>
<ConstDecl>
const
int
<ConstDef>
xxx
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<ConstInitVal>
{
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<ConstInitVal>
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
}
;
<Decl>
<VarDecl>
int
<VarDef>
ans
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
,
<VarDef>
arr
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
}
;
<FuncDef>
<FuncType>
int
getDif3N
(
<FuncFParams>
<FuncFParam>
int
min
,
<FuncFParam>
int
max
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<VarDef>
k
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
cnt
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
arr1
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
=
<InitVal>
{
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
}
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
k
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
&&
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
!=
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
cnt
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
cnt
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
k
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
k
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
j
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
j
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
cnt
;
}
<FuncDef>
<FuncType>
int
judgeB
(
<FuncFParams>
<FuncFParam>
int
a
,
<FuncFParam>
int
b
)
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
;
}
else
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
b
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
}
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
<FuncDef>
<FuncType>
void
printArr
(
<FuncFParams>
<FuncFParam>
int
a
[
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
printf
(
"%d"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
printf
(
"\n"
)
;
}
<FuncDef>
<FuncType>
void
printArr2
(
<FuncFParams>
<FuncFParam>
int
a
[
]
[
<ConstExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
]
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
4
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printArr
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
a
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
]
)
;
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
return
;
}
<FuncDef>
<FuncType>
void
printHello
(
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
name
;
<BlockItem>
<Stmt>
<LVal>
name
=
getint
(
)
;
<BlockItem>
<Stmt>
printf
(
"Hello %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
name
)
;
}
<FuncDef>
<FuncType>
int
add
(
<FuncFParams>
<FuncFParam>
int
n
)
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ans
;
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
n
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
;
}
<FuncDef>
<FuncType>
void
opp
(
)
<Block>
{
}
<MainFuncDef>
int
main
(
)
<Block>
{
<BlockItem>
<Stmt>
printf
(
"19373573\n"
)
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
ans
;
<BlockItem>
<Stmt>
;
<BlockItem>
<Stmt>
<Block>
{
}
<BlockItem>
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
;
}
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
i
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
y
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
!
<UnaryExp>
<PrimaryExp>
<LVal>
y
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
y
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
<BlockItem>
<Stmt>
<LVal>
y
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
+
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
<LVal>
y
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<UnaryOp>
-
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
xx
;
<BlockItem>
<Stmt>
<LVal>
xx
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
16
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
)
/
<UnaryExp>
<PrimaryExp>
(
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
)
-
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
14
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
next
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
;
<BlockItem>
<Stmt>
while
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
<=
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
<BlockItem>
<Stmt>
continue
;
}
<BlockItem>
<Stmt>
if
(
<Cond>
<LOrExp>
<LAndExp>
<EqExp>
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
==
<RelExp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
5
)
<Stmt>
<Block>
{
<BlockItem>
<Stmt>
break
;
}
else
<Stmt>
<Block>
{
<BlockItem>
<Decl>
<VarDecl>
int
<VarDef>
j
=
<InitVal>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
;
}
<BlockItem>
<Stmt>
<LVal>
i
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
i
+
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
;
}
<BlockItem>
<Stmt>
<LVal>
ans
=
getint
(
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
add
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
)
)
;
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
getDif3N
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
1
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
999
)
;
<BlockItem>
<Stmt>
printf
(
"%d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
)
;
<BlockItem>
<Stmt>
<LVal>
ans
=
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
judgeB
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
2
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
3
)
;
<BlockItem>
<Stmt>
printf
(
"judgeB 2,3 = %d\n"
,
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
ans
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printHello
(
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printArr2
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
next
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printArr
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
next
[
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
]
)
;
<BlockItem>
<Stmt>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
printArr
(
<FuncRParams>
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<LVal>
arr
)
;
<BlockItem>
<Stmt>
return
<Exp>
<AddExp>
<MulExp>
<UnaryExp>
<PrimaryExp>
<Number>
0
;
}
